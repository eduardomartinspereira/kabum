generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  cpf       String?  @unique
  password  String?
  firstName String?
  lastName  String?
  phone     String?
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  basePrice   Decimal       @db.Decimal(10, 2)
  category    String
  brand       String?
  isActive    Boolean       @default(true)
  images      ProductImage[]
  variations  ProductVariation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
}

model ProductVariation {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String?
  color     String?
  material  String?
  stock     Int      @default(0)
  price     Decimal  @db.Decimal(10, 2)
  sku       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
}

model Payment {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // IDs do Mercado Pago
  mercadopagoId     String   @unique
  externalReference String   @unique
  
  // Informações do pagamento
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @default("BRL")
  status            PaymentStatus
  paymentMethod     String
  
  // Informações do pagador
  payerName         String
  payerEmail        String
  payerCpf          String
  
  // Metadados e informações adicionais
  description       String?
  items             Json?    // Array de itens em JSON
  
  // URLs e referências
  receiptUrl        String?
  successUrl        String?
  failureUrl        String?
  
  // Timestamps do Mercado Pago
  mpCreatedAt       DateTime?
  mpUpdatedAt       DateTime?
  
  // Status específicos do Mercado Pago
  mpStatusDetail    String?
  mpRejectionReason String?
  
  // Relacionamentos
  webhookEvents     WebhookEvent[]
  
  @@map("payments")
}

// Eventos de webhook para auditoria
model WebhookEvent {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Referência ao pagamento
  paymentId   String
  payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  // Dados do webhook
  eventType   String   // payment.created, payment.updated, etc.
  eventData   Json     // Dados completos do webhook
  
  // Status do processamento
  processed   Boolean  @default(false)
  processedAt DateTime?
  error       String?
  
  @@map("webhook_events")
}

// Enum para status dos pagamentos
enum PaymentStatus {
  PENDING     // Pendente
  APPROVED    // Aprovado
  REJECTED    // Recusado
  CANCELLED   // Cancelado
  IN_PROCESS  // Em processamento
  REFUNDED    // Reembolsado
  CHARGED_BACK // Contestado
} 
